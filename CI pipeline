//CI pipeline

pipeline {
    agent any
    
    stages {
        stage('Clone Repository') {
            steps {
                script {
                    git 'https://gitlab.com/vkorotetskiy/lab2023q1.git'
                }
            }
        }
        
        stage('SonarQube analysis') {
            steps {
                script {
                    def scannerHome = tool 'SonarQube Scanner 3.0'
                    withSonarQubeEnv('My SonarQube Server') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }
        
        stage('Build Docker image') {
            steps {
                script {
                    dockerImage = docker.build registry + ":$BUILD_NUMBER"
                }
            }
        }
        
        stage('Tag Docker Image') {
            steps {
                script {
                    
                    def buildVersion = sh(returnStdout: true, script: 'echo $BUILD_NUMBER').trim()
                                       
                    // sh "docker tag my-docker-image my-docker-repo:latest"
                    sh "docker tag my-docker-image my-docker-repo:$buildVersion"
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                   
                   withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"
                        sh "docker push my-docker-repo:latest"
                        sh "docker push my-docker-repo:$buildVersion"
                    }
                }
            }
        }
    }
    
    post {
        success {
            
            emailext subject: 'Build Success',
                     body: 'The build has succeeded',
                     to: 'v.korotetskiy@gmail.com'
        }
        
        failure {
            
            emailext subject: 'Build Failed',
                     body: 'The build has failed',
                     to: 'v.korotetskiy@gmail.com'
        }
    }
}